Diff_Statistically_Less = Random_SS_Less,
Diff_Statistically_Greater = Random_SS_Greater)
#says whether there is a stat difference between the new Steady_State data and Random Control
if (Random_SS_Stat_Diff$p.value < p) {
if (Random_SS_Diff_Less$p.value < Random_SS_Diff_Greater$p.value){
outcome_4 <- "The new cell line has statistically higher distances in Steady_State phase than the Random Control"
outcome_4a <- FALSE
}  else {
outcome_4 <- "The new cell line has statistically lower distances in Steady_State phase than the Random Control"
outcome_4a <- TRUE
}}else {
outcome_4 <- "There is no statistical difference in distances between the new cell line in Steady_State phase and the Random Control"
outcome_4a <- FALSE
}
}
###################################
#IS THERE A STATISTICAL DIFFERENCE BETWEEN THE STEADY-STATE AND Steady_State PHASES?
#only preform stats test if data exists
if ("Maintenance" %in% Wilcox$Phase & "Initiation" %in% Wilcox$Phase) {
#is there a general difference in distances recorded between the data sets?
Phase_Stat_Diff <- wilcox.test(Wilcox[which(Wilcox$Phase=="Maintenance"),]$Distance,
Wilcox[which(Wilcox$Phase=="Initiation"),]$Distance)
Phase_Stat_Diff$p.value #p < 0 suggests a statistical difference / p > 0 suggests not statistical difference
#if there is a difference in distance, is it statistically less?
Phase_Diff_Less <- wilcox.test(Wilcox[which(Wilcox$Phase=="Maintenance"),]$Distance,
Wilcox[which(Wilcox$Phase=="Initiation"),]$Distance, alternative = "less")
Phase_Diff_Less$p.value #p = 1 suggests new cell line lower distances than Phase
#if there is a difference in distance, is it statistically Greater?
Phase_Diff_Greater <- wilcox.test(Wilcox[which(Wilcox$Phase=="Maintenance"),]$Distance,
Wilcox[which(Wilcox$Phase=="Initiation"),]$Distance, alternative = "greater")
Phase_Diff_Greater$p.value #p = 1 suggests new cell line has higher distances than Phase
#record  Phase p values in table
Phase_Diff <- Phase_Stat_Diff$p.value
Phase_Less <- Phase_Diff_Less$p.value
Phase_Greater <- Phase_Diff_Greater$p.value
Phase_p_values <- tibble(Phase_Diff, Phase_Less, Phase_Greater) %>%
transmute(Comaprision = "Steady_State_vs_Expansion_Data",
General_Stat_Diff = Phase_Diff,
Diff_Statistically_Less = Phase_Less,
Diff_Statistically_Greater = Phase_Greater)
#says whether there is a stat difference between the expansion and steady state phases
if (Phase_Stat_Diff$p.value < p) {
if (Phase_Diff_Less$p.value < Phase_Diff_Greater$p.value){
outcome_5 <- "The Expansion Phase has statistically higher distances than the Steady-State"
}  else {
outcome_5 <- "The Expansion Phase has statistically lower distances than the Steady-State"
}}else {
outcome_5 <- "There is no statistical difference in distances between the Expansion Phase and Steady-State"
}
}
#record all p values for each test and save the results
NNA_p_Values <- Edu_Exp_p_values %>%
bind_rows(Edu_SS_p_values,
Random_Exp_p_values,
Random_SS_p_values,
Phase_p_values)
#create empty tibbles to hold p-values
Edu_Exp_p_values <- tibble()
Edu_SS_p_values <- tibble()
Random_Exp_p_values <- tibble()
Random_SS_p_values <- tibble()
Phase_p_values<- tibble()
#is there a general difference in distances recorded between the data sets?
Random_Exp_Stat_Diff <- wilcox.test(Wilcox[which(Wilcox$Phase=="random_sample"),]$Distance,
Wilcox[which(Wilcox$Phase=="Initiation"),]$Distance)
Random_Exp_Stat_Diff$p.value #p < 0 suggests a statistical difference / p > 0 suggests not statistical difference
#if there is a difference in distance, is it statistically less?
Random_Exp_Diff_Less <- wilcox.test(Wilcox[which(Wilcox$Phase=="random_sample"),]$Distance,
Wilcox[which(Wilcox$Phase=="Initiation"),]$Distance, alternative = "less")
Random_Exp_Diff_Less$p.value #p = 1 suggests new cell line lower distances than Random
#if there is a difference in distance, is it statistically Greater?
Random_Exp_Diff_Greater <- wilcox.test(Wilcox[which(Wilcox$Phase=="random_sample"),]$Distance,
Wilcox[which(Wilcox$Phase=="Initiation"),]$Distance, alternative = "greater")
Random_Exp_Diff_Greater$p.value #p = 1 suggests new cell line has higher distances than Random
#record  Random p values in table
Random_Exp_Diff <- Random_Exp_Stat_Diff$p.value
Random_Exp_Less <- Random_Exp_Diff_Less$p.value
Random_Exp_Greater <- Random_Exp_Diff_Greater$p.value
Random_Exp_p_values <- tibble(Random_Exp_Diff, Random_Exp_Less, Random_Exp_Greater) %>%
transmute(Comaprision = "Random_vs_Expansion_Data",
General_Stat_Diff = Random_Exp_Diff,
Diff_Statistically_Less = Random_Exp_Less,
Diff_Statistically_Greater = Random_Exp_Greater)
#says whether there is a stat difference between the new expansion data and Random Control
if (Random_Exp_Stat_Diff$p.value < p) {
if (Random_Exp_Diff_Less$p.value < Random_Exp_Diff_Greater$p.value){
outcome_2 <- "The new cell line has statistically higher distances in Expansion phase than the Random Control"
outcome_2a <- FALSE
}  else {
outcome_2 <- "The new cell line has statistically lower distances in Expansion phase than the Random Control"
outcome_2a <- TRUE
}}else {
outcome_2 <- "There is no statistical difference in distances between the new cell line in Expansion phase and the Random Control"
outcome_2a <- FALSE
}
}
###################################
#IS THERE A STATISTICAL DIFFERENCE BETWEEN THE Steady_State AND INTERNAL EdU CONTROL?
#only preform stats test if data exists
if ("Maintenance" %in% Wilcox$Phase) {
#is there a general difference in distances recorded between the data sets?
Edu_SS_Stat_Diff <- wilcox.test(Wilcox[which(Wilcox$Phase=="EdU"),]$Distance,
Wilcox[which(Wilcox$Phase=="Maintenance"),]$Distance)
Edu_SS_Stat_Diff$p.value #p = 1 suggests a statistical difference / p nearly 0 suggests no statistical difference
#if there is a difference in distance, is it statistically less?
Edu_SS_Diff_Less <- wilcox.test(Wilcox[which(Wilcox$Phase=="EdU"),]$Distance,
Wilcox[which(Wilcox$Phase=="Maintenance"),]$Distance, alternative = "less")
Edu_SS_Diff_Less$p.value #p = 1 suggests new cell line lower distances than EdU
#if there is a difference in distance, is it statistically Greater?
Edu_SS_Diff_Greater <- wilcox.test(Wilcox[which(Wilcox$Phase=="EdU"),]$Distance,
Wilcox[which(Wilcox$Phase=="Maintenance"),]$Distance, alternative = "greater")
Edu_SS_Diff_Greater$p.value #p = 1 suggests new cell line has higher distances than EdU
#record  EdU p values in table
Edu_SS_Diff <- Edu_SS_Stat_Diff$p.value
Edu_SS_Less <- Edu_SS_Diff_Less$p.value
Edu_SS_Greater <- Edu_SS_Diff_Greater$p.value
Edu_SS_p_values <- tibble(Edu_SS_Diff, Edu_SS_Less, Edu_SS_Greater) %>%
transmute(Comaprision = "EdU_vs_SS_Data",
General_Stat_Diff = Edu_SS_Diff,
Diff_Statistically_Less = Edu_SS_Less,
Diff_Statistically_Greater = Edu_SS_Greater)
#says whether there is a stat difference between the new data and EdU Control
if (Edu_SS_Stat_Diff$p.value < p) {
if (Edu_SS_Diff_Less$p.value < Edu_SS_Diff_Greater$p.value){
outcome_3 <- "The new cell line has statistically higher distances in Steady_State phase than the EdU Control"
outcome_3a <- TRUE
}  else {
outcome_3 <- "The new cell line has statistically lower distances in Steady_State phase than the EdU Control"
outcome_3a <- FALSE
}}else {
outcome_3 <- "There is no statistical difference in distances between the new cell line in Steady_State phase and the EdU Control"
outcome_3a <- FALSE
}
###################################
#IS THERE A STATISTICAL DIFFERENCE BETWEEN THE Steady_State DATA AND INTERNAL RANDOM CONTROL?
#is there a general difference in distances recorded between the data sets?
Random_SS_Stat_Diff <- wilcox.test(Wilcox[which(Wilcox$Phase=="random_sample"),]$Distance,
Wilcox[which(Wilcox$Phase=="Maintenance"),]$Distance)
Random_SS_Stat_Diff$p.value #p < 0 suggests a statistical difference / p > 0 suggests not statistical difference
#if there is a difference in distance, is it statistically less?
Random_SS_Diff_Less <- wilcox.test(Wilcox[which(Wilcox$Phase=="random_sample"),]$Distance,
Wilcox[which(Wilcox$Phase=="Maintenance"),]$Distance, alternative = "less")
Random_SS_Diff_Less$p.value #p = 1 suggests new cell line lower distances than Random
#if there is a difference in distance, is it statistically Greater?
Random_SS_Diff_Greater <- wilcox.test(Wilcox[which(Wilcox$Phase=="random_sample"),]$Distance,
Wilcox[which(Wilcox$Phase=="Maintenance"),]$Distance, alternative = "greater")
Random_SS_Diff_Greater$p.value #p = 1 suggests new cell line has higher distances than Random
#record  Random p values in table
Random_SS_Diff <- Random_SS_Stat_Diff$p.value
Random_SS_Less <- Random_SS_Diff_Less$p.value
Random_SS_Greater <- Random_SS_Diff_Greater$p.value
Random_SS_p_values <- tibble(Random_SS_Diff, Random_SS_Less, Random_SS_Greater) %>%
transmute(Comaprision = "Random_vs_Steady_State_Data",
General_Stat_Diff = Random_SS_Diff,
Diff_Statistically_Less = Random_SS_Less,
Diff_Statistically_Greater = Random_SS_Greater)
#says whether there is a stat difference between the new Steady_State data and Random Control
if (Random_SS_Stat_Diff$p.value < p) {
if (Random_SS_Diff_Less$p.value < Random_SS_Diff_Greater$p.value){
outcome_4 <- "The new cell line has statistically higher distances in Steady_State phase than the Random Control"
outcome_4a <- FALSE
}  else {
outcome_4 <- "The new cell line has statistically lower distances in Steady_State phase than the Random Control"
outcome_4a <- TRUE
}}else {
outcome_4 <- "There is no statistical difference in distances between the new cell line in Steady_State phase and the Random Control"
outcome_4a <- FALSE
}
}
###################################
#IS THERE A STATISTICAL DIFFERENCE BETWEEN THE STEADY-STATE AND Steady_State PHASES?
#only preform stats test if data exists
if ("Maintenance" %in% Wilcox$Phase & "Initiation" %in% Wilcox$Phase) {
#is there a general difference in distances recorded between the data sets?
Phase_Stat_Diff <- wilcox.test(Wilcox[which(Wilcox$Phase=="Maintenance"),]$Distance,
Wilcox[which(Wilcox$Phase=="Initiation"),]$Distance)
Phase_Stat_Diff$p.value #p < 0 suggests a statistical difference / p > 0 suggests not statistical difference
#if there is a difference in distance, is it statistically less?
Phase_Diff_Less <- wilcox.test(Wilcox[which(Wilcox$Phase=="Maintenance"),]$Distance,
Wilcox[which(Wilcox$Phase=="Initiation"),]$Distance, alternative = "less")
Phase_Diff_Less$p.value #p = 1 suggests new cell line lower distances than Phase
#if there is a difference in distance, is it statistically Greater?
Phase_Diff_Greater <- wilcox.test(Wilcox[which(Wilcox$Phase=="Maintenance"),]$Distance,
Wilcox[which(Wilcox$Phase=="Initiation"),]$Distance, alternative = "greater")
Phase_Diff_Greater$p.value #p = 1 suggests new cell line has higher distances than Phase
#record  Phase p values in table
Phase_Diff <- Phase_Stat_Diff$p.value
Phase_Less <- Phase_Diff_Less$p.value
Phase_Greater <- Phase_Diff_Greater$p.value
Phase_p_values <- tibble(Phase_Diff, Phase_Less, Phase_Greater) %>%
transmute(Comaprision = "Steady_State_vs_Expansion_Data",
General_Stat_Diff = Phase_Diff,
Diff_Statistically_Less = Phase_Less,
Diff_Statistically_Greater = Phase_Greater)
#says whether there is a stat difference between the expansion and steady state phases
if (Phase_Stat_Diff$p.value < p) {
if (Phase_Diff_Less$p.value < Phase_Diff_Greater$p.value){
outcome_5 <- "The Expansion Phase has statistically higher distances than the Steady-State"
}  else {
outcome_5 <- "The Expansion Phase has statistically lower distances than the Steady-State"
}}else {
outcome_5 <- "There is no statistical difference in distances between the Expansion Phase and Steady-State"
}
}
#record all p values for each test and save the results
NNA_p_Values <- Edu_Exp_p_values %>%
bind_rows(Edu_SS_p_values,
Random_Exp_p_values,
Random_SS_p_values,
Phase_p_values)
#overall states whether coupling has been observed in the new cell line
if(outcome_1a & outcome_2a) {
outcome_6 <- "Suggests that the new cell line has conversved coupling in the expansion phase"
} else {
outcome_6 <- "Suggests that the new cell line disrupts couplingin the expansion phase"
}
if(outcome_3a & outcome_4a) {
outcome_7 <- "Suggests that the new cell line has conversved coupling in the steady-state phase"
} else {
outcome_7 <- "Suggests that the new cell line disrupts couplingin the steady-state phase"
}
print(outcome_5)
print(outcome_6)
print(outcome_7)
if ("Maintenance" %in% Wilcox$Phase & "Initiation" %in% Wilcox$Phase) {
print(outcome_5)
}
if ("Initiation" %in% Wilcox$Phase) {
print(outcome_6)
}
if ("Maintenance" %in% Wilcox$Phase) {
print(outcome_7)
}
source('~/RNA-SPLIT/Scripts/Data_Analysis_Pipeline/Data_Analysis_Run_All_Scripts.R')
clean_env(all_input_vars)
source(here("Analysis", "Cloud_Volumes_Box_Plot_Wilcoxon.R"))
clean_env(all_input_vars)
source(here("Analysis", "Density_Box_Plot_Wilcoxon.R"))
clean_env(all_input_vars)
source(here("Analysis", "Molecule_Count_Box_Plot_Wilcoxon.R"))
clean_env(all_input_vars)
source(here("Analysis", "Transcription_Box_Plot_Wilcoxon.R"))
clean_env(all_input_vars)
source(here("Analysis", "NNA_Violin_Plot_Wilcoxon.R"))
clean_env(all_input_vars)
clean_env(all_input_vars)
all_input_vars
clean_env(all_input_vars)
except <- all_input_vars
all_objs <- ls()
?ls
ls(1)
source('~/RNA-SPLIT/Scripts/Data_Analysis_Pipeline/utils.R')
clean_env(all_input_vars)
warnings()
source('~/RNA-SPLIT/Scripts/Data_Analysis_Pipeline/utils.R')
clean_env(all_input_vars)
?RM
?rm
source('~/RNA-SPLIT/Scripts/Data_Analysis_Pipeline/utils.R')
source(here("Analysis", "Density_Box_Plot_Wilcoxon.R"))
source(here("Analysis", "Molecule_Count_Box_Plot_Wilcoxon.R"))
source(here("Analysis", "Transcription_Box_Plot_Wilcoxon.R"))
source(here("Analysis", "NNA_Violin_Plot_Wilcoxon.R"))
?ls
source('~/RNA-SPLIT/Scripts/Data_Analysis_Pipeline/utils.R')
clean_env(all_input_vars)
source(here("Analysis", "NNA_Violin_Plot_Wilcoxon.R"))
#overall states whether coupling has been observed in the new cell line
if ("Maintenance" %in% Wilcox$Phase & "Initiation" %in% Wilcox$Phase) {
print(outcome_5)
}
if ("Initiation" %in% Wilcox$Phase) {
if(outcome_1a & outcome_2a) {
outcome_6 <- "Suggests that the new cell line has conversved coupling in the expansion phase"
} else {
outcome_6 <- "Suggests that the new cell line disrupts couplingin the expansion phase"
}
print(outcome_6)
}
if ("Maintenance" %in% Wilcox$Phase) {
if(outcome_3a & outcome_4a) {
outcome_7 <- "Suggests that the new cell line has conversved coupling in the steady-state phase"
} else {
outcome_7 <- "Suggests that the new cell line disrupts couplingin the steady-state phase"
}
print(outcome_7)
}
source('~/RNA-SPLIT/Scripts/Data_Analysis_Pipeline/Data_Analysis_Run_All_Scripts.R', echo=TRUE)
all_input_vars <- ls()
#Get all variables currently in environment, these are not removed after a script
#
all_input_vars <- c(ls(), "all_input_vars")
clean_env(all_input_vars)
source('~/RNA-SPLIT/Scripts/Data_Analysis_Pipeline/Data_Analysis_Run_All_Scripts.R')
source('~/RNA-SPLIT/Scripts/Data_Analysis_Pipeline/utils.R')
?clean_env
source('~/RNA-SPLIT/Scripts/Data_Analysis_Pipeline/Data_Analysis_Run_All_Scripts.R')
clean_env(all_input_vars)
source(here("Analysis", "NNA_Violin_Plot_Wilcoxon.R"))
source(here("Analysis", "NNA_Violin_Plot_Wilcoxon.R"))
To run this script, press Ctrl+Shift+S (or Command+Shift+S on Mac)
################################################################################
#USER INPUT REQUIRED
#set name of new cell line - should be spelled the same as folder name within the directory
#make sure not to use any spaces or symbols other than an underscore (_), dash (-), or full stop (.)
#eg "Mettl3_dTAG" or "SPEN_RRM_del" or "Ciz1_KO"
New_Line_Name <- "hnRNPU_dTAG"
#define type of cells used in experiment - either "mESCs" or "NPCs"
Cell_Type <- "mESCs"
#define time points used in both datasets
#make sure that the lists include all the possible time-points for your data
#it is ok if the lists contain extra time-points, as these lists are a superset of time points
#it doesn't matter if initiation/maintenance have different time points
Dynamic_Time <- c(10, 20, 30, 40, 50, 60)
Turnover_Time <- c(0, 60, 80, 100, 120, 140, 160, 180, 200, 220)
#set name of reference/control line
#make sure spelling of this name is the same as what appears in the Pulse_Chase_Analysis\mESCs\Parameter\All_Cell_Lines folder
Reference_Line_Name <- "WT"
Cell_Line_3 <- "Ciz1_KO"
Cell_Line_4 <- "SPEN_RRM_del"
#define the threshold used to determine a significant result during wilcoxon test
p <- 0.05
#define colours for each cell line
#set colour for the reference line (pink)
Colour_1 <- "#F768A1"        #sets colour for reference line
Colour_1_EdU <- "#FDE0DD"    #sets colour for EdU control of Reference_Line_Name
Colour_1_exp <- "#FA9FB5"    #sets colour for expansion phase Reference_Line_Name
Colour_1_ss <- "#DD3497"     #sets colour for steady state phase Reference_Line_Name
Colour_1_Random <- "#FCC5C0" #sets colour for Random control of Reference_Line_Name
#set colour for the new cell line (blue)
Colour_2 <- "#67A9CF"        #sets colour for new cell line
Colour_2_EdU <- "#ECE2F0"    #sets colour for EdU control of new cell line
Colour_2_exp <- "#A6BDDB"    #sets colour for expansion phase new cell line
Colour_2_ss <- "#3690C0"     #sets colour for steady state phase new cell line
Colour_2_Random <- "#D0D1E6" #sets colour for Random control of new cell line
#set colour for the cell line 3 (orange)
Colour_3 <- "#FD8D3C"     #sets colour for cell_line_3
Colour_3_exp <- "#FEB24C" #sets colour for expansion phase new cell_line_3
Colour_3_ss <- "#FC4E2A"  #sets colour for steady state phase new cell_line_3
#set colour for the cell line 4 (green)
Colour_4 <- "#78C679"     #sets colour for cell_line_4
Colour_4_exp <- "#ADDD8E" #sets colour for expansion phase new cell_line_3
Colour_4_ss <- "#41AB5D"  #sets colour for steady state phase new cell_line_3
#set name of how cell lines should be presented in the plot - ensures name consistency with other papers
#if name contains delta/triangle symbol use - "SPEN^"~Delta*"RRM"
Name_1 <- bquote("Protein1_FKBP12"^"F36V") #sets name for new cell line
Name_2 <- bquote("WT")                   #sets name for Reference_Line_Name
Name_3 <- bquote("Ciz1_KO")              #sets name for cell_line_3
Name_4 <- bquote("SPEN"^~Delta*"RRM")    #sets name for cell_line_4
#select which time points to present for transcription dynamics
Timepoints <- c("20", "40", "60")
#define which dataset you want to present for the nearest neighbour analysis
New_Line_Data <- "Turnover" #should be "Turnover" or "Dynamic"
Ref_Line_Data <- "Dynamic" #should be "Turnover" or "Dynamic"
################################################################################
#load libraries
library(here)
library(tidyverse)
library(stringr)
library(tcltk)
library(RColorBrewer)
#load functions used in scripts
source(here("utils.R"))
################################################################################
#OTHER INPUTS
#the below inputs should not need changing
#creates list of datasets being used for compile
Data_Set_List <- c("nascent_Xist_dynamics",
"Xist_turnover_on_chromatin")
#creates list of phases being used for compile
Phase_List <- c("Initiation", "Maintenance")
#define file path to where Watershed Algorithm "results" are found - needs to be located in documents due to long file path names
Input_File_Path <- choose_dir(caption = "Select (open on Mac) Watershed_Algorithm_Results folder, where raw data is found")
#define file path to where "Pulse_Chase_Analysis" is located - results from this scripts will be stored here
Output_File_Path <- choose_dir(caption = "Select (open on Mac) Pulse_Chase_Analysis folder, where compiled data will be stored")
#Get all variables currently in environment, these are not removed after a script
#
all_input_vars <- c(ls(), "all_input_vars")
print("Outcomes of wilcoxon stats test:")
source(here("Analysis", "Cloud_Volumes_Box_Plot_Wilcoxon.R"))
clean_env(all_input_vars)
source(here("Analysis", "Density_Box_Plot_Wilcoxon.R"))
clean_env(all_input_vars)
source(here("Analysis", "Molecule_Count_Box_Plot_Wilcoxon.R"))
clean_env(all_input_vars)
source(here("Analysis", "NNA_Violin_Plot_Wilcoxon.R"))
clean_env(all_input_vars)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/RNA-SPLIT/Scripts/Data_Analysis_Pipeline/Data_Analysis_Run_All_Scripts.R', echo=TRUE)
clean_env(all_input_vars)
source(here("Analysis", "Density_Box_Plot_Wilcoxon.R"))
####################################################################################################################
#SCRIPT USED TO PERFORM RBNA-SPLIT DATA ANALYSIS PIPELINE
#please contact Holly Roach at hmroach@hotmail.co.uk if you have any questions
####################################################################################################################
#IMPORTANT - before running this script make sure you have done the following:
# 1 - In the Watershed_Algorithm_Results folder make sure you have a folder corresponding to the new of your new cell line
#     this file should contain the raw data files for each cropped cloud image that were created by the algorithm on the micron server
#     within this folder there should be subfolders for the Data_Set, Phase and Timepoints used in the analysis
# 2 - makes sure here, tidyverse, stringr, RColorBrewer and tcltk packages have been installed
#     if these are not installed you can run - install.packages("package_name") - in the console
# 3 - make sure you have ran the ImageJ macro (ImageJ_Cloud_Volume.ijm) prior to running this script
# 4 - within the Pulse_Chase_Analysis folder make sure you have created a specific for your new cell line in the Nearest_Neighbour subfolder
#     this folder should contain a nascent_Xist_dynamics and a Xist_turnover_on_chromatin folder
#     within each dataset folder, there should be an EdU_Control and Random_Control folder which contain files corresponding to these controls
#     this only needs to be done for the NNA as subfolders for all other parameters are generated for you by the script
# 5 - make sure that the user inputs in lines 22-96 have been made compatible for your analysis
#MAKE SURE YOU HAVE FOLLOWED THE ABOVE INSTRUCTIONS BEFORE ATTEMPTING TO RUN THIS SCRIPT
#To run this script, press Ctrl+Shift+S (or Command+Shift+S on Mac)
################################################################################
#USER INPUT REQUIRED
#set name of new cell line - should be spelled the same as folder name within the directory
#make sure not to use any spaces or symbols other than an underscore (_), dash (-), or full stop (.)
#eg "Mettl3_dTAG" or "SPEN_RRM_del" or "Ciz1_KO"
New_Line_Name <- "hnRNPU_dTAG"
#define type of cells used in experiment - either "mESCs" or "NPCs"
Cell_Type <- "mESCs"
#define time points used in both datasets
#make sure that the lists include all the possible time-points for your data
#it is ok if the lists contain extra time-points, as these lists are a superset of time points
#it doesn't matter if initiation/maintenance have different time points
Dynamic_Time <- c(10, 20, 30, 40, 50, 60)
Turnover_Time <- c(0, 60, 80, 100, 120, 140, 160, 180, 200, 220)
#set name of reference/control line
#make sure spelling of this name is the same as what appears in the Pulse_Chase_Analysis\mESCs\Parameter\All_Cell_Lines folder
Reference_Line_Name <- "WT"
Cell_Line_3 <- "Ciz1_KO"
Cell_Line_4 <- "SPEN_RRM_del"
#define the threshold used to determine a significant result during wilcoxon test
p <- 0.05
#define colours for each cell line
#set colour for the reference line (pink)
Colour_1 <- "#F768A1"        #sets colour for reference line
Colour_1_EdU <- "#FDE0DD"    #sets colour for EdU control of Reference_Line_Name
Colour_1_exp <- "#FA9FB5"    #sets colour for expansion phase Reference_Line_Name
Colour_1_ss <- "#DD3497"     #sets colour for steady state phase Reference_Line_Name
Colour_1_Random <- "#FCC5C0" #sets colour for Random control of Reference_Line_Name
#set colour for the new cell line (blue)
Colour_2 <- "#67A9CF"        #sets colour for new cell line
Colour_2_EdU <- "#ECE2F0"    #sets colour for EdU control of new cell line
Colour_2_exp <- "#A6BDDB"    #sets colour for expansion phase new cell line
Colour_2_ss <- "#3690C0"     #sets colour for steady state phase new cell line
Colour_2_Random <- "#D0D1E6" #sets colour for Random control of new cell line
#set colour for the cell line 3 (orange)
Colour_3 <- "#FD8D3C"     #sets colour for cell_line_3
Colour_3_exp <- "#FEB24C" #sets colour for expansion phase new cell_line_3
Colour_3_ss <- "#FC4E2A"  #sets colour for steady state phase new cell_line_3
#set colour for the cell line 4 (green)
Colour_4 <- "#78C679"     #sets colour for cell_line_4
Colour_4_exp <- "#ADDD8E" #sets colour for expansion phase new cell_line_3
Colour_4_ss <- "#41AB5D"  #sets colour for steady state phase new cell_line_3
#set name of how cell lines should be presented in the plot - ensures name consistency with other papers
#if name contains delta/triangle symbol use - "SPEN^"~Delta*"RRM"
Name_1 <- bquote("Protein1_FKBP12"^"F36V") #sets name for new cell line
Name_2 <- bquote("WT")                   #sets name for Reference_Line_Name
Name_3 <- bquote("Ciz1_KO")              #sets name for cell_line_3
Name_4 <- bquote("SPEN"^~Delta*"RRM")    #sets name for cell_line_4
#select which time points to present for transcription dynamics
Timepoints <- c("20", "40", "60")
#define which dataset you want to present for the nearest neighbour analysis
New_Line_Data <- "Turnover" #should be "Turnover" or "Dynamic"
Ref_Line_Data <- "Dynamic" #should be "Turnover" or "Dynamic"
################################################################################
#load libraries
library(here)
library(tidyverse)
library(stringr)
library(tcltk)
library(RColorBrewer)
#load functions used in scripts
source(here("utils.R"))
################################################################################
#OTHER INPUTS
#the below inputs should not need changing
#creates list of datasets being used for compile
Data_Set_List <- c("nascent_Xist_dynamics",
"Xist_turnover_on_chromatin")
#creates list of phases being used for compile
Phase_List <- c("Initiation", "Maintenance")
#define file path to where Watershed Algorithm "results" are found - needs to be located in documents due to long file path names
Input_File_Path <- choose_dir(caption = "Select (open on Mac) Watershed_Algorithm_Results folder, where raw data is found")
#define file path to where "Pulse_Chase_Analysis" is located - results from this scripts will be stored here
Output_File_Path <- choose_dir(caption = "Select (open on Mac) Pulse_Chase_Analysis folder, where compiled data will be stored")
#Get all variables currently in environment, these are not removed after a script
#
all_input_vars <- c(ls(), "all_input_vars")
source('~/RNA-SPLIT/Scripts/Data_Analysis_Pipeline/Data_Analysis_Run_All_Scripts.R')
clean_env(all_input_vars)
source(here("Analysis", "Density_Box_Plot_Wilcoxon.R"))
clean_env(all_input_vars)
source(here("Analysis", "Density_Box_Plot_Wilcoxon.R"))
#make box plot
box_plot <- ggplot(Present_Data, aes(x= Cell_Line, y = Distance, fill = Cell_Line)) +    #defines data to present
geom_boxplot(outlier.shape = NA,  ) +                                                  #defines type of plot
scale_x_discrete(labels = Labels) +                                                    #adds labels to plot
scale_fill_manual(values = c(Colour_1,                                                 #defines the colour of each boxplot
Colour_2,
Colour_3,
Colour_4),
labels = Labels) +
coord_cartesian(ylim = c((Min_y),(4000) )) +                                           #adjusts scale so whiskers don't touch the end graph
labs(title = Title,                                                                    #sets name of the axes
x = x_axis,
y = y_axis)
#view the box plot
print(box_plot)
clean_env(all_input_vars)
source(here("Analysis", "Density_Box_Plot_Wilcoxon.R"))
clean_env(all_input_vars)
source(here("Analysis", "Density_Box_Plot_Wilcoxon.R"))
